[{"/Volumes/butbut/code/testapi/plugintester/src/Client.ts":"1","/Volumes/butbut/code/testapi/plugintester/src/index.tsx":"2","/Volumes/butbut/code/testapi/plugintester/src/App.tsx":"3","/Volumes/butbut/code/testapi/plugintester/src/reportWebVitals.ts":"4"},{"size":10020,"mtime":1616324899000,"results":"5","hashOfConfig":"6"},{"size":500,"mtime":1609233049000,"results":"7","hashOfConfig":"6"},{"size":5818,"mtime":1616419878000,"results":"8","hashOfConfig":"6"},{"size":425,"mtime":1609233049000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1xg82uv",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/butbut/code/testapi/plugintester/src/Client.ts",["20","21","22","23","24","25","26","27"],"import { PluginClient } from \"@remixproject/plugin\";\nimport { createClient } from \"@remixproject/plugin-webview\";\nimport { BehaviorSubject } from \"rxjs\";\nimport axios from 'axios';\n\nconst simpleContract = `pragma solidity >=0.4.22 <0.7.0;\n/**\n* @title Storage\n* @dev Store & retreive value in a variable\n*/\ncontract StorageTestUpdateConfiguration {\n  uint256 number;\n  /**\n   * @dev Store value in variable\n   * @param num value to store\n   */\n  function store(uint256 num) public {\n      number = num;\n  }\n  /**\n   * @dev Return value \n   * @return value of 'number'\n   */\n  function retreive() public view returns (uint256){\n      return number;\n  }\n}\n          \n          `;\n\nexport class WorkSpacePlugin extends PluginClient {\n  callBackEnabled: boolean = true;\n  feedback = new BehaviorSubject<string>(\"\");\n\n  constructor() {\n    super();\n    console.log(\"CONSTRUCTOR\")\n    createClient(this);\n    this.onload().then(async (x) => {\n      console.log(\"client loaded\", JSON.stringify(this));\n      try{\n        await this.call(\"solidityUnitTesting\",\"testFromSource\",\"\")\n      }catch(e){\n        console.log(\"not available\")\n      }\n      /*\n      let acc = await this.call(\"udapp\",\"getSettings\")\n      console.log(acc)\n      let ac2 = await this.call(\"udapp\",\"getAccounts\")\n      console.log(ac2)\n      const privateKey = \"71975fbf7fe448e004ac7ae54cad0a383c3906055a75468714156a07385e96ce\"\n      const balance = \"0x56BC75E2D63100000\"\n      let na = await this.call(\"udapp\",\"createVMAccount\",{ privateKey, balance })\n      console.log(na)\n\n      this.on('udapp', 'newTransaction', (tx: any) => {\n        // Do something\n        console.log(\"new transaction\", tx)\n      })\n  \n      this.on(\"solidity\",\"compilationFinished\",function(x){\n        console.log(\"comp fin\",x)\n      })\n      */\n      await this.setCallBacks();\n    }).catch(async (e)=>{\n      console.log(\"ERROR CONNECTING\",e)\n    });\n  }\n\n  async setCallBacks() {\n    console.log(\"set listeners\")\n    let me = this;\n    this.on(\"fileManager\", \"currentFileChanged\", function (x) {\n      console.log(\"file changed\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileManager\", \"fileRemoved\", function (x) {\n      console.log(\"REMOVE\", x);\n      me.log(x);\n    });\n\n    this.on(\"solidity\", \"compilationFinished\", function (target, source, version, data) {\n      console.log(\"compile finished\", target, source, version,  data);\n    });\n\n    this.on(\"fileManager\", \"fileAdded\", function (x) {\n      console.log(\"added file\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileExplorers\", \"createWorkspace\", function (x) {\n      console.log(\"ws create\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileExplorers\", \"setWorkspace\", function (x) {\n      console.log(\"ws set\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileExplorers\", \"deleteWorkspace\", function (x) {\n      console.log(\"wS DELETE\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileExplorers\", \"renameWorkspace\", function (x) {\n      console.log(\"wS rn\", x);\n      me.log(x);\n    });\n  }\n\n  async log(message: string) {\n    //console.log(message)\n  }\n\n  async test(p: string) {}\n\n  async activate(){\n    this.call(\"manager\",\"activatePlugin\",\"remixd\")\n  }\n\n  async deactivate(){\n    this.call(\"manager\",\"deactivatePlugin\",\"111\")\n  }\n\n  async getresult(){\n    let r = await this.call(\"solidity\",\"getCompilationResult\")\n    console.log(\"RESULT\", r)\n  }\n\n  async gitbranches(){\n    let r = await this.call(\"dGitProvider\",\"branches\")\n    console.log(\"branches\", r)\n  }\n  async gitbranch(dir:string){\n    let r = await this.call(\"dGitProvider\",\"branch\",dir)\n  }\n\n  async gitcurrentbranch(){\n    let r = await this.call(\"dGitProvider\",\"currentbranch\")\n    console.log(r)\n  }\n\n  async gitcheckout(dir:string){\n    let r = await this.call(\"dGitProvider\",\"checkout\",dir)\n  }\n\n  async gitinit(dir:string){\n    let s = await this.call(\"fileExplorers\",\"getCurrentWorkspace\")\n    let r = await this.call(\"dGitProvider\",\"init\")\n  }\n\n  async gitstatus(dir:string){\n    let r = await this.call(\"dGitProvider\",\"status\",'HEAD')\n    console.log(\"git status \", r)\n  }\n\n  async gitadd(dir:string){\n    let r = await this.call(\"dGitProvider\",\"add\",dir)\n    console.log(\"git add \", r)\n  }\n\n  async gitremove(dir:string){\n    let r = await this.call(\"dGitProvider\",\"rm\",dir)\n    console.log(\"git rm \", r)\n  }\n\n  async gitlog(){\n    let r = await this.call(\"dGitProvider\",\"log\",'HEAD')\n    console.log(\"git log \", r)\n  }\n\n  async gitcommit(){\n    let r = await this.call(\"dGitProvider\",\"commit\",{})\n    console.log(\"git log \", r)\n  }\n\n  async gitlsfiles(){\n    let r = await this.call(\"dGitProvider\",\"lsfiles\",'HEAD')\n    console.log(\"git log \", r)\n  }\n\n  async gitresolveref(){\n    let r = await this.call(\"dGitProvider\",\"resolveref\",'HEAD')\n    console.log(\"git resolve \", r)\n  }\n\n  async gitreadblob(file:string){\n    let c = await this.call(\"dGitProvider\",\"log\",'HEAD')\n    console.log(c[c.length-1].oid)\n    let r = await this.call(\"dGitProvider\",\"readblob\",{oid:c[c.length-1].oid, filepath:\"README.txt\"})\n    console.log(\"git blob \", r)\n  }\n\n  async ipfspush()\n  {\n    await this.call(\"dGitProvider\", \"push\");\n  }\n\n  async ipfspull(cid:string){\n    try{\n    await this.call(\"dGitProvider\", \"pull\", cid);\n    }catch(e){\n\n    }\n  }\n\n  async ipfsConfig(){\n    try{\n      let r = await this.call(\"dGitProvider\", \"setIpfsConfig\", {\n        host: 'localhost',\n        port: 5002,\n        protocol: 'http',\n        ipfsurl: 'https://ipfsgw.komputing.org/ipfs/'\n      });\n      console.log(r)\n      }catch(e){\n        console.log(e)\n      } \n  }\n\n  async read(dir: string) {\n    let files = await this.call(\"fileManager\", \"readdir\", dir);\n    console.log(files.toString());\n    console.log(files);\n  }\n  async write(dir: string) {\n    this.call(\"fileManager\", \"setFile\", dir, simpleContract);\n  }\n\n  async getcurrentfile() {\n    var files = await this.call(\"fileManager\", \"getCurrentFile\");\n    console.log(files);\n  }\n\n  async switchfile(dir: string) {\n    var files = await this.call(\"fileManager\", \"switchFile\", dir);\n  }\n\n  async zip(){\n    let r = await this.call(\"dGitProvider\",\"zip\")\n  }\n\n  async fetch(dir: string) {\n    try {\n      var files = await fetch(dir);\n      console.log(files)\n      console.log(files.toString());\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async axios(dir:string){\n    try {\n      var files = await axios.get(dir);\n      console.log(files)\n      console.log(files.toString());\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getcompilerconfig(){\n    //let config = await this.call(\"solidity\",\"getCompilerConfig\")\n    //console.log(config)\n  }\n\n\n  async getWorkSpace(){\n    let s = await this.call(\"fileExplorers\",\"getCurrentWorkspace\")\n    console.log(s)\n  }\n\n  async getWorkSpaces(){\n    let s = await this.call(\"fileExplorers\",\"getWorkspaces\")\n    console.log(s)\n  }\n\n  async createWorkSpace(name: string){\n    let s = await this.call(\"fileExplorers\",\"createWorkspace\", name)\n    //await this.call(\"fileExplorers\",\"setWorkspace\", name)\n  }\n\n\n\n  async importcontent(dir: string) {\n    console.log(\"import content\");\n    var content = await this.call(\n      \"contentImport\",\n      \"resolve\",\n      \"ipfs://Qmd1gr9VeQaYNA8wVDq86RwdeMZkfF93JZhhWgfCVewYtc\"\n    );\n    console.log(\"content\", content);\n  }\n  async open(dir: string) {\n    await this.call(\"fileManager\", \"open\", dir);\n  }\n\n  async highlight(f: string) {\n    this.call(\n      \"editor\",\n      \"highlight\",\n      {\n        start: {\n          line: 0,\n          column: 1,\n        },\n        end: {\n          line: 1,\n          column: 10,\n        },\n      },\n      f,\n      \"#ffffff\"\n    );\n  }\n\n  async addAnnotation(f: string) {\n    this.call(\"editor\", \"addAnnotation\", {\n      row: 1,\n      column: 1,\n      text: \"annotation\",\n      type: \"error\",\n    });\n    this.call(\"editor\", \"addAnnotation\", {\n      row: 10,\n      column: 2,\n      text: \"annotation\",\n      type: \"info\",\n    });\n    this.call(\"editor\", \"addAnnotation\", {\n      row: 12,\n      column: 1,\n      text: \"annotation\",\n      type: \"warning\",\n    });\n  }\n\n  async clearAnnotations(f: string) {\n    this.call(\"editor\", \"clearAnnotations\");\n  }\n\n  async getSettings() {\n    let settings = await this.call(\"udapp\", \"getSettings\");\n    console.log(settings);\n  }\n\n  async setSettings() {\n    let settings = await this.call(\"udapp\", \"setEnvironmentMode\", \"injected\");\n    await this.getSettings();\n  }\n\n  async getAccounts() {\n    let settings = await this.call(\"udapp\", \"getAccounts\");\n    console.log(settings);\n    return settings;\n  }\n\n\n  async soltest() {\n    const f = `pragma solidity >=0.4.0 <0.7.0;\n\n    contract SimpleStorage {\n        uint storedData;\n        \n        // a public function named set that returns a uint goes here\n        function set(uint _p1) public returns (uint) {\n            storedData = _p1;\n        }\n        \n       function get() public view returns (uint) {\n            return storedData;\n        }\n    }\n    `;\n\n    const t = `pragma solidity >=0.4.0 <0.7.0;\n    import \"remix_tests.sol\"; // this import is automatically injected by Remix.\n    import \"./modifyVariable.sol\";\n    \n    contract test3 {\n    \n        SimpleStorage storageToTest;\n        function beforeAll () public {\n           storageToTest = new SimpleStorage();\n        }\n    \n        function checkSetFunction () public {\n            storageToTest.set(12345);\n            Assert.equal(storageToTest.get(), uint(12345), \"the contract should contain the function set\");\n        }\n    }\n    `;\n\n    console.log(f);\n    console.log(t);\n\n    await this.call(\"fileManager\", \"setFile\", \"/modifyVariable.sol\", f);\n    await this.call(\"fileManager\", \"switchFile\", \"/modifyVariable.sol\");\n    await this.call(\"fileManager\", \"setFile\", \"/modifyVariable_test.sol\", t);\n    const result = await this.call(\n      \"solidityUnitTesting\",\n      \"testFromPath\",\n      \"modifyVariable_test.sol\"\n    );\n    return result.errors;\n  }\n\n  async disableCallBacks() {\n    this.callBackEnabled = false;\n  }\n  async enableCallBacks() {\n    this.callBackEnabled = true;\n  }\n}\n","/Volumes/butbut/code/testapi/plugintester/src/index.tsx",[],"/Volumes/butbut/code/testapi/plugintester/src/App.tsx",["28","29","30","31","32","33"],"import { time } from \"console\";\nimport { useState } from \"react\";\nimport useBehaviorSubject from \"use-behavior-subject\";\nimport \"./App.css\";\nimport { WorkSpacePlugin } from \"./Client\";\nimport { Logger } from \"./logger\";\n\nexport const client = new WorkSpacePlugin();\n\nfunction App() {\n  \n  const [dir, setDir] = useState<string>(\"QmWhPht9m9GMSa3CoMqetvqNk6vZgmGBziTjBhQpxCUWJ8\");\n  const [result,setResult] = useState<string>()\n\n\n\n  const handleChange = ({ target }: any) => {\n    setDir(target.value);\n  };\n\n  const gettime = () => {\n    return Date.now()\n  }\n\n  const test = async ()=>{\n    setResult(\"\")\n    const r = await client.soltest()\n    setResult(\"test done\")\n  }\n\n  return (\n    <div className=\"App\">\n      <div>v5</div>\n      <div>{result}</div>\n      <a href='vscode://RemixProject.ethereum-remix/pull?cid=QmPfLVGMj431EpNckuvZCjdhrBKp3KZ3Dv3N6YwZ1eBna2' target=\"_blank\">testlink</a>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.zip()}>zip</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.ipfspush()}>ipfs push</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.ipfspull(dir)}>ipfs pull</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.ipfsConfig()}>ipfs config</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getAccounts()}>get accounts</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.setSettings()}>set settings to injected</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getSettings()}>get settings</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await test()}>run sol test</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.highlight(dir)}>highlight</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.addAnnotation(dir)}>annotation</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.clearAnnotations(dir)}>clear annotation</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.open(dir)}>openfile</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.read(dir)}>read</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.write(dir)}>write</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.switchfile(dir)}>switch to file</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getcurrentfile()}>getcurrentfile</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.importcontent(dir)}>import content resolve</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.fetch(dir)}>api test fetch</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.axios(dir)}>api test axios</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.activate()}>activate</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.deactivate()}>deactivate</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getresult()}>get compilation result</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getcompilerconfig()}>get compiler config</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getWorkSpace()}>get workspace</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.getWorkSpaces()}>get workspaces</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.createWorkSpace(dir)}>create workspace</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitinit(dir)}>git init</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitstatus(dir)}>git status</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitlog()}>git log</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitcommit()}>git commit</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitadd(dir)}>git add</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitremove(dir)}>git rm</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitlsfiles()}>git ls files</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitreadblob(dir)}>git read blob</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitresolveref()}>git resolve head</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitbranches()}>git branches</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitbranch(dir)}>git create branch</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitcheckout(dir)}>git checkout</button>\n      <button className='btn btn-primary btn-sm'  onClick={async () => await client.gitcurrentbranch()}>git current branch</button>\n      <input\n        type=\"text\"\n        name=\"payloadBox\"\n        placeholder=\"Enter payload here...\"\n        value={dir}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Volumes/butbut/code/testapi/plugintester/src/reportWebVitals.ts",[],{"ruleId":"34","severity":1,"message":"35","line":138,"column":9,"nodeType":"36","messageId":"37","endLine":138,"endColumn":10},{"ruleId":"34","severity":1,"message":"35","line":147,"column":9,"nodeType":"36","messageId":"37","endLine":147,"endColumn":10},{"ruleId":"34","severity":1,"message":"38","line":151,"column":9,"nodeType":"36","messageId":"37","endLine":151,"endColumn":10},{"ruleId":"34","severity":1,"message":"35","line":152,"column":9,"nodeType":"36","messageId":"37","endLine":152,"endColumn":10},{"ruleId":"34","severity":1,"message":"39","line":239,"column":9,"nodeType":"36","messageId":"37","endLine":239,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":243,"column":9,"nodeType":"36","messageId":"37","endLine":243,"endColumn":10},{"ruleId":"34","severity":1,"message":"38","line":283,"column":9,"nodeType":"36","messageId":"37","endLine":283,"endColumn":10},{"ruleId":"34","severity":1,"message":"40","line":352,"column":9,"nodeType":"36","messageId":"37","endLine":352,"endColumn":17},{"ruleId":"34","severity":1,"message":"41","line":1,"column":10,"nodeType":"36","messageId":"37","endLine":1,"endColumn":14},{"ruleId":"34","severity":1,"message":"42","line":3,"column":8,"nodeType":"36","messageId":"37","endLine":3,"endColumn":26},{"ruleId":"34","severity":1,"message":"43","line":6,"column":10,"nodeType":"36","messageId":"37","endLine":6,"endColumn":16},{"ruleId":"34","severity":1,"message":"44","line":21,"column":9,"nodeType":"36","messageId":"37","endLine":21,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":27,"column":11,"nodeType":"36","messageId":"37","endLine":27,"endColumn":12},{"ruleId":"45","severity":1,"message":"46","line":35,"column":110,"nodeType":"47","endLine":35,"endColumn":125},"@typescript-eslint/no-unused-vars","'r' is assigned a value but never used.","Identifier","unusedVar","'s' is assigned a value but never used.","'files' is assigned a value but never used.","'settings' is assigned a value but never used.","'time' is defined but never used.","'useBehaviorSubject' is defined but never used.","'Logger' is defined but never used.","'gettime' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]