[{"/Volumes/butbut/code/testapi/plugintester/src/reportWebVitals.ts":"1","/Volumes/butbut/code/testapi/plugintester/src/Client.ts":"2","/Volumes/butbut/code/testapi/plugintester/src/index.tsx":"3","/Volumes/butbut/code/testapi/plugintester/src/App.tsx":"4","/Volumes/butbut/code/testapi/plugintester/src/logger.tsx":"5"},{"size":425,"mtime":1609233049000,"results":"6","hashOfConfig":"7"},{"size":6179,"mtime":1614165635000,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1609233049000,"results":"9","hashOfConfig":"7"},{"size":2199,"mtime":1614165662000,"results":"10","hashOfConfig":"7"},{"size":327,"mtime":1612964635000,"results":"11","hashOfConfig":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"cnfw3i",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1xg82uv","/Volumes/butbut/code/testapi/plugintester/src/reportWebVitals.ts",[],["25","26"],"/Volumes/butbut/code/testapi/plugintester/src/Client.ts",["27","28"],"import { PluginClient } from \"@remixproject/plugin\";\nimport { createClient } from \"@remixproject/plugin-webview\";\nimport { BehaviorSubject } from \"rxjs\";\nimport axios from 'axios';\n\nconst simpleContract = `pragma solidity >=0.4.22 <0.7.0;\n/**\n* @title Storage\n* @dev Store & retreive value in a variable\n*/\ncontract StorageTestUpdateConfiguration {\n  uint256 number;\n  /**\n   * @dev Store value in variable\n   * @param num value to store\n   */\n  function store(uint256 num) public {\n      number = num;\n  }\n  /**\n   * @dev Return value \n   * @return value of 'number'\n   */\n  function retreive() public view returns (uint256){\n      return number;\n  }\n}\n          \n          `;\n\nexport class WorkSpacePlugin extends PluginClient {\n  callBackEnabled: boolean = true;\n  feedback = new BehaviorSubject<string>(\"\");\n\n  constructor() {\n    super();\n    createClient(this);\n    this.onload().then(async () => {\n      //console.log(\"workspace client loaded\", this);\n      /*\n      let acc = await this.call(\"udapp\",\"getSettings\")\n      console.log(acc)\n      let ac2 = await this.call(\"udapp\",\"getAccounts\")\n      console.log(ac2)\n      const privateKey = \"71975fbf7fe448e004ac7ae54cad0a383c3906055a75468714156a07385e96ce\"\n      const balance = \"0x56BC75E2D63100000\"\n      let na = await this.call(\"udapp\",\"createVMAccount\",{ privateKey, balance })\n      console.log(na)\n\n      this.on('udapp', 'newTransaction', (tx: any) => {\n        // Do something\n        console.log(\"new transaction\", tx)\n      })\n  \n      this.on(\"solidity\",\"compilationFinished\",function(x){\n        console.log(\"comp fin\",x)\n      })\n      */\n      //await this.setCallBacks();\n    });\n  }\n\n  async setCallBacks() {\n    let me = this;\n    this.on(\"fileManager\", \"currentFileChanged\", function (x) {\n      console.log(\"file changed\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileManager\", \"fileRemoved\", function (x) {\n      console.log(\"REMOVE\", x);\n      me.log(x);\n    });\n\n    this.on(\"solidity\", \"compilationFinished\", function (x) {\n      console.log(\"compile finished\", x);\n      me.log(x);\n    });\n\n    this.on(\"fileManager\", \"fileAdded\", function (x) {\n      console.log(\"added\", x);\n      me.log(x);\n    });\n  }\n\n  async log(message: string) {\n    //console.log(message)\n  }\n\n  async test(p: string) {}\n\n  async read(dir: string) {\n    let files = await this.call(\"fileManager\", \"readdir\", dir);\n    console.log(files.toString());\n    console.log(files);\n  }\n  async write(dir: string) {\n    this.call(\"fileManager\", \"setFile\", dir, simpleContract);\n  }\n\n  async getcurrentfile() {\n    var files = await this.call(\"fileManager\", \"getCurrentFile\");\n    console.log(files);\n  }\n\n  async switchfile(dir: string) {\n    var files = await this.call(\"fileManager\", \"switchFile\", dir);\n  }\n\n  async fetch(dir: string) {\n    try {\n      var files = await fetch(dir);\n      console.log(files)\n      console.log(files.toString());\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async axios(dir:string){\n    try {\n      var files = await axios.get(dir);\n      console.log(files)\n      console.log(files.toString());\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async importcontent(dir: string) {\n    console.log(\"import content\");\n    var content = await this.call(\n      \"contentImport\",\n      \"resolve\",\n      \"ipfs://Qmd1gr9VeQaYNA8wVDq86RwdeMZkfF93JZhhWgfCVewYtc\"\n    );\n    console.log(\"content\", content);\n  }\n  async open(dir: string) {\n    await this.call(\"fileManager\", \"open\", dir);\n  }\n\n  async highlight(f: string) {\n    this.call(\n      \"editor\",\n      \"highlight\",\n      {\n        start: {\n          line: 0,\n          column: 1,\n        },\n        end: {\n          line: 1,\n          column: 10,\n        },\n      },\n      f,\n      \"#ffffff\"\n    );\n  }\n\n  async addAnnotation(f: string) {\n    this.call(\"editor\", \"addAnnotation\", {\n      row: 1,\n      column: 1,\n      text: \"annotation\",\n      type: \"error\",\n    });\n    this.call(\"editor\", \"addAnnotation\", {\n      row: 10,\n      column: 2,\n      text: \"annotation\",\n      type: \"info\",\n    });\n    this.call(\"editor\", \"addAnnotation\", {\n      row: 12,\n      column: 1,\n      text: \"annotation\",\n      type: \"warning\",\n    });\n  }\n\n  async clearAnnotations(f: string) {\n    this.call(\"editor\", \"clearAnnotations\");\n  }\n\n  async getSettings() {\n    let settings = await this.call(\"udapp\", \"getSettings\");\n    console.log(settings);\n  }\n\n  async setSettings() {\n    let settings = await this.call(\"udapp\", \"setEnvironmentMode\", \"injected\");\n    await this.getSettings();\n  }\n\n  async getAccounts() {\n    let settings = await this.call(\"udapp\", \"getAccounts\");\n    console.log(settings);\n    return settings;\n  }\n\n\n  async soltest() {\n    const f = `pragma solidity >=0.4.0 <0.7.0;\n\n    contract SimpleStorage {\n        uint storedData;\n        \n        // a public function named set that returns a uint goes here\n        function set(uint _p1) public returns (uint) {\n            storedData = _p1;\n        }\n        \n       function get() public view returns (uint) {\n            return storedData;\n        }\n    }\n    `;\n\n    const t = `pragma solidity >=0.4.0 <0.7.0;\n    import \"remix_tests.sol\"; // this import is automatically injected by Remix.\n    import \"./modifyVariable.sol\";\n    \n    contract test3 {\n    \n        SimpleStorage storageToTest;\n        function beforeAll () public {\n           storageToTest = new SimpleStorage();\n        }\n    \n        function checkSetFunction () public {\n            storageToTest.set(12345);\n            Assert.equal(storageToTest.get(), uint(12345), \"the contract should contain the function set\");\n        }\n    }\n    `;\n\n    console.log(f);\n    console.log(t);\n\n    await this.call(\"fileManager\", \"setFile\", \"/modifyVariable.sol\", f);\n    await this.call(\"fileManager\", \"switchFile\", \"/modifyVariable.sol\");\n    await this.call(\"fileManager\", \"setFile\", \"/modifyVariable_test.sol\", t);\n    const result = await this.call(\n      \"solidityUnitTesting\",\n      \"testFromPath\",\n      \"modifyVariable_test.sol\"\n    );\n    return result.errors;\n  }\n\n  async disableCallBacks() {\n    this.callBackEnabled = false;\n  }\n  async enableCallBacks() {\n    this.callBackEnabled = true;\n  }\n}\n","/Volumes/butbut/code/testapi/plugintester/src/index.tsx",[],"/Volumes/butbut/code/testapi/plugintester/src/App.tsx",["29","30","31","32","33"],"/Volumes/butbut/code/testapi/plugintester/src/logger.tsx",["34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":107,"column":9,"nodeType":"41","messageId":"42","endLine":107,"endColumn":14},{"ruleId":"39","severity":1,"message":"43","line":193,"column":9,"nodeType":"41","messageId":"42","endLine":193,"endColumn":17},{"ruleId":"39","severity":1,"message":"44","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":14},{"ruleId":"39","severity":1,"message":"45","line":3,"column":8,"nodeType":"41","messageId":"42","endLine":3,"endColumn":26},{"ruleId":"39","severity":1,"message":"46","line":6,"column":10,"nodeType":"41","messageId":"42","endLine":6,"endColumn":16},{"ruleId":"39","severity":1,"message":"47","line":21,"column":9,"nodeType":"41","messageId":"42","endLine":21,"endColumn":16},{"ruleId":"39","severity":1,"message":"48","line":27,"column":11,"nodeType":"41","messageId":"42","endLine":27,"endColumn":12},{"ruleId":"49","severity":1,"message":"50","line":9,"column":47,"nodeType":"51","messageId":"52","endLine":9,"endColumn":49},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'files' is assigned a value but never used.","Identifier","unusedVar","'settings' is assigned a value but never used.","'time' is defined but never used.","'useBehaviorSubject' is defined but never used.","'Logger' is defined but never used.","'gettime' is assigned a value but never used.","'r' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]